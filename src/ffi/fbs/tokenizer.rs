#![allow(dead_code)]
#![allow(unused_imports)]

// automatically generated by the FlatBuffers compiler, do not modify

// @generated

use core::cmp::Ordering;
use core::mem;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum IndexedWordOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct IndexedWord<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for IndexedWord<'a> {
    type Inner = IndexedWord<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: unsafe { flatbuffers::Table::new(buf, loc) },
        }
    }
}

impl<'a> IndexedWord<'a> {
    pub const VT_INDEX: flatbuffers::VOffsetT = 4;
    pub const VT_VALUE: flatbuffers::VOffsetT = 6;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        IndexedWord { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
        args: &'args IndexedWordArgs<'args>,
    ) -> flatbuffers::WIPOffset<IndexedWord<'bldr>> {
        let mut builder = IndexedWordBuilder::new(_fbb);
        builder.add_index(args.index);
        if let Some(x) = args.value {
            builder.add_value(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn index(&self) -> u64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u64>(IndexedWord::VT_INDEX, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn value(&self) -> Option<&'a str> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<&str>>(IndexedWord::VT_VALUE, None)
        }
    }
}

impl flatbuffers::Verifiable for IndexedWord<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<u64>("index", Self::VT_INDEX, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<&str>>("value", Self::VT_VALUE, false)?
            .finish();
        Ok(())
    }
}
pub struct IndexedWordArgs<'a> {
    pub index: u64,
    pub value: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for IndexedWordArgs<'a> {
    #[inline]
    fn default() -> Self {
        IndexedWordArgs {
            index: 0,
            value: None,
        }
    }
}

pub struct IndexedWordBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> IndexedWordBuilder<'a, 'b, A> {
    #[inline]
    pub fn add_index(&mut self, index: u64) {
        self.fbb_.push_slot::<u64>(IndexedWord::VT_INDEX, index, 0);
    }
    #[inline]
    pub fn add_value(&mut self, value: flatbuffers::WIPOffset<&'b str>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(IndexedWord::VT_VALUE, value);
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    ) -> IndexedWordBuilder<'a, 'b, A> {
        let start = _fbb.start_table();
        IndexedWordBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<IndexedWord<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for IndexedWord<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("IndexedWord");
        ds.field("index", &self.index());
        ds.field("value", &self.value());
        ds.finish()
    }
}
pub enum WordContextOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct WordContext<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for WordContext<'a> {
    type Inner = WordContext<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: unsafe { flatbuffers::Table::new(buf, loc) },
        }
    }
}

impl<'a> WordContext<'a> {
    pub const VT_CURRENT: flatbuffers::VOffsetT = 4;
    pub const VT_FIRST_BEFORE: flatbuffers::VOffsetT = 6;
    pub const VT_SECOND_BEFORE: flatbuffers::VOffsetT = 8;
    pub const VT_FIRST_AFTER: flatbuffers::VOffsetT = 10;
    pub const VT_SECOND_AFTER: flatbuffers::VOffsetT = 12;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        WordContext { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
        args: &'args WordContextArgs<'args>,
    ) -> flatbuffers::WIPOffset<WordContext<'bldr>> {
        let mut builder = WordContextBuilder::new(_fbb);
        if let Some(x) = args.second_after {
            builder.add_second_after(x);
        }
        if let Some(x) = args.first_after {
            builder.add_first_after(x);
        }
        if let Some(x) = args.second_before {
            builder.add_second_before(x);
        }
        if let Some(x) = args.first_before {
            builder.add_first_before(x);
        }
        if let Some(x) = args.current {
            builder.add_current(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn current(&self) -> IndexedWord<'a> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<IndexedWord>>(WordContext::VT_CURRENT, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn first_before(&self) -> Option<IndexedWord<'a>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<IndexedWord>>(
                WordContext::VT_FIRST_BEFORE,
                None,
            )
        }
    }
    #[inline]
    pub fn second_before(&self) -> Option<IndexedWord<'a>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<IndexedWord>>(
                WordContext::VT_SECOND_BEFORE,
                None,
            )
        }
    }
    #[inline]
    pub fn first_after(&self) -> Option<IndexedWord<'a>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<IndexedWord>>(WordContext::VT_FIRST_AFTER, None)
        }
    }
    #[inline]
    pub fn second_after(&self) -> Option<IndexedWord<'a>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<IndexedWord>>(
                WordContext::VT_SECOND_AFTER,
                None,
            )
        }
    }
}

impl flatbuffers::Verifiable for WordContext<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<flatbuffers::ForwardsUOffset<IndexedWord>>(
                "current",
                Self::VT_CURRENT,
                true,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<IndexedWord>>(
                "first_before",
                Self::VT_FIRST_BEFORE,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<IndexedWord>>(
                "second_before",
                Self::VT_SECOND_BEFORE,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<IndexedWord>>(
                "first_after",
                Self::VT_FIRST_AFTER,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<IndexedWord>>(
                "second_after",
                Self::VT_SECOND_AFTER,
                false,
            )?
            .finish();
        Ok(())
    }
}
pub struct WordContextArgs<'a> {
    pub current: Option<flatbuffers::WIPOffset<IndexedWord<'a>>>,
    pub first_before: Option<flatbuffers::WIPOffset<IndexedWord<'a>>>,
    pub second_before: Option<flatbuffers::WIPOffset<IndexedWord<'a>>>,
    pub first_after: Option<flatbuffers::WIPOffset<IndexedWord<'a>>>,
    pub second_after: Option<flatbuffers::WIPOffset<IndexedWord<'a>>>,
}
impl<'a> Default for WordContextArgs<'a> {
    #[inline]
    fn default() -> Self {
        WordContextArgs {
            current: None, // required field
            first_before: None,
            second_before: None,
            first_after: None,
            second_after: None,
        }
    }
}

pub struct WordContextBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> WordContextBuilder<'a, 'b, A> {
    #[inline]
    pub fn add_current(&mut self, current: flatbuffers::WIPOffset<IndexedWord<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<IndexedWord>>(
                WordContext::VT_CURRENT,
                current,
            );
    }
    #[inline]
    pub fn add_first_before(&mut self, first_before: flatbuffers::WIPOffset<IndexedWord<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<IndexedWord>>(
                WordContext::VT_FIRST_BEFORE,
                first_before,
            );
    }
    #[inline]
    pub fn add_second_before(&mut self, second_before: flatbuffers::WIPOffset<IndexedWord<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<IndexedWord>>(
                WordContext::VT_SECOND_BEFORE,
                second_before,
            );
    }
    #[inline]
    pub fn add_first_after(&mut self, first_after: flatbuffers::WIPOffset<IndexedWord<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<IndexedWord>>(
                WordContext::VT_FIRST_AFTER,
                first_after,
            );
    }
    #[inline]
    pub fn add_second_after(&mut self, second_after: flatbuffers::WIPOffset<IndexedWord<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<IndexedWord>>(
                WordContext::VT_SECOND_AFTER,
                second_after,
            );
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    ) -> WordContextBuilder<'a, 'b, A> {
        let start = _fbb.start_table();
        WordContextBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<WordContext<'a>> {
        let o = self.fbb_.end_table(self.start_);
        self.fbb_.required(o, WordContext::VT_CURRENT, "current");
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for WordContext<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("WordContext<'_>");
        ds.field("current", &self.current());
        ds.field("first_before", &self.first_before());
        ds.field("second_before", &self.second_before());
        ds.field("first_after", &self.first_after());
        ds.field("second_after", &self.second_after());
        ds.finish()
    }
}
#[inline]
/// Verifies that a buffer of bytes contains a `WordContext<'_>`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_word_context_unchecked`.
pub fn root_as_word_context(buf: &[u8]) -> Result<WordContext<'_>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root::<WordContext<'_>>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `WordContext<'_>` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_word_context_unchecked`.
pub fn size_prefixed_root_as_word_context(
    buf: &[u8],
) -> Result<WordContext<'_>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root::<WordContext<'_>>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `WordContext<'_>` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_word_context_unchecked`.
pub fn root_as_word_context_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<WordContext<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::root_with_opts::<WordContext<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `WordContext<'_>` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_word_context_unchecked`.
pub fn size_prefixed_root_as_word_context_with_opts<'b, 'o>(
    opts: &'o flatbuffers::VerifierOptions,
    buf: &'b [u8],
) -> Result<WordContext<'b>, flatbuffers::InvalidFlatbuffer> {
    flatbuffers::size_prefixed_root_with_opts::<WordContext<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a WordContext<'_> and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `WordContext<'_>`.
pub unsafe fn root_as_word_context_unchecked(buf: &[u8]) -> WordContext<'_> {
    unsafe { flatbuffers::root_unchecked::<WordContext<'_>>(buf) }
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed WordContext<'_> and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `WordContext<'_>`.
pub unsafe fn size_prefixed_root_as_word_context_unchecked(buf: &[u8]) -> WordContext<'_> {
    unsafe { flatbuffers::size_prefixed_root_unchecked::<WordContext<'_>>(buf) }
}
#[inline]
pub fn finish_word_context_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<WordContext<'a>>,
) {
    fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_word_context_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<WordContext<'a>>,
) {
    fbb.finish_size_prefixed(root, None);
}
