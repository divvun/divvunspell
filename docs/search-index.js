var searchIndex = new Map(JSON.parse('[\
["accuracy",{"t":"FJFFFOOONNNNNNNNNNNNNNNNONNNNNNNNNNONNNNNNOOONNNNNNNNNNNNNNONNNNHHONOONOOONNNNOOOOOONNNNOOONNNNNNNNNNNN","n":["AccuracyResult","CFG","Report","Summary","Time","any_position","average_time","average_time_95pc","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","clone_to_uninit","clone_to_uninit","clone_to_uninit","cmp","config","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","distance","drop","drop","drop","drop","eq","equivalent","expected","fastest_lookup","first_position","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","input","into","into","into","into","load_words","main","metadata","new","no_suggestions","only_wrong","partial_cmp","position","results","secs","serialize","serialize","serialize","serialize","slowest_lookup","start_timestamp","subsec_nanos","suggestions","summary","time","to_owned","to_owned","to_string","to_string","top_five","total_time","total_words","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"accuracy"],[103,"core::cmp"],[104,"core::fmt"],[105,"core::result"],[106,"core::option"],[107,"alloc::string"],[108,"alloc::vec"],[109,"core::error"],[110,"alloc::boxed"],[111,"serde::ser"],[112,"core::any"]],"i":[0,0,0,0,0,4,4,4,3,13,14,4,3,13,14,4,3,4,3,4,3,3,4,3,14,3,4,3,13,14,4,3,13,14,4,13,3,13,14,4,3,3,13,4,4,3,3,13,14,4,4,3,13,14,4,3,13,14,4,13,3,13,14,4,0,0,14,4,4,4,3,13,14,3,3,13,14,4,4,14,3,13,14,13,3,4,3,4,4,14,4,3,13,14,4,3,13,14,4,3,13,14,4],"f":"````````{{{b{c}}}{{b{e}}}{}{}}000{{{b{dc}}}{{b{de}}}{}{}}000{{{b{f}}}f}{{{b{h}}}h}{{{b{c}}{b{de}}}j{}{}}0{{{b{c}}}j{}}00{{{b{f}}{b{f}}}l}`{{}f}{{}h}{n{{b{c}}}{}}000{n{{b{dc}}}{}}000`{nj}000{{{b{f}}{b{f}}}A`}{{{b{c}}{b{e}}}A`{}{}}```{{{b{f}}{b{dAb}}}{{Af{jAd}}}}{{{b{f}}{b{dAb}}}Ah}{{{b{Aj}}{b{dAb}}}Ah}{{{b{Al}}{b{dAb}}}Ah}{{{b{h}}{b{dAb}}}{{Af{jAd}}}}{{{b{h}}{b{dAb}}}Ah}{cc{}}000{{}n}000`{ce{}{}}000{{{b{An}}{B`{n}}}{{Af{{Bf{{Bd{BbBb}}}}{Bj{Bh}}}}}}{{}{{Af{j{Bj{Bh}}}}}}`{{{b{{Bl{Aj}}}}}h}``{{{b{f}}{b{f}}}{{B`{l}}}}```{{{b{f}}c}AfBn}{{{b{Aj}}c}AfBn}{{{b{Al}}c}AfBn}{{{b{h}}c}AfBn}``````{{{b{c}}}e{}{}}0{{{b{c}}}Bb{}}0```{c{{Af{e}}}{}{}}0000000{{{b{c}}}C`{}}000","D":"A`","p":[[1,"reference"],[0,"mut"],[5,"Time",0],[5,"Summary",0],[1,"unit"],[6,"Ordering",103],[1,"usize"],[1,"bool"],[5,"Formatter",104],[5,"Error",104],[6,"Result",105],[8,"Result",104],[5,"AccuracyResult",0],[5,"Report",0],[1,"str"],[6,"Option",106],[5,"String",107],[1,"tuple"],[5,"Vec",108],[10,"Error",109],[5,"Box",110],[1,"slice"],[10,"Serializer",111],[5,"TypeId",112]],"r":[],"b":[[45,"impl-Display-for-Time"],[46,"impl-Debug-for-Time"],[49,"impl-Display-for-Summary"],[50,"impl-Debug-for-Summary"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAF8AAwAAADMAOAAEAEEAJgA="}],\
["divvunspell",{"t":"FGFKPFFPFFPFOOONNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNOOOMNNNNNNNNNNNNNNNOOOONNNNNOOONNNNNNNNOOHHONNNNNNNNNNNHOOHNNNNNNNNNNNNHOOHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOMNNMNNMNN","n":["Args","Command","JsonWriter","OutputWriter","Predict","PredictArgs","StdoutWriter","Suggest","SuggestArgs","SuggestionRequest","Tokenize","TokenizeArgs","always_suggest","archive","archive","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","command","command","command","command","command","command","command_list","command_list","command_list","command_list","command_list","command_name","command_name","command_name","command_name","command_name","command_usage","command_usage","command_usage","command_usage","command_usage","disable_recase","disable_reweight","disable_spelling_validation","finish","finish","finish","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","help","help","help","help","help_requested","help_requested","help_requested","help_requested","help_requested","inputs","inputs","inputs","into","into","into","into","into","into","into","into","is_correct","is_words_only","load_archive","main","nbest","new","parse","parse","parse","parse","parse","parse_command","parse_command","parse_command","parse_command","parse_command","predict","predict","predictor_name","run","self_command_list","self_command_list","self_command_list","self_command_list","self_command_list","self_usage","self_usage","self_usage","self_usage","self_usage","serialize","serialize","suggest","suggest","suggestions","tokenize","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","usage","usage","usage","usage","usage","use_json","use_json","weight","word","write_correction","write_correction","write_correction","write_predictions","write_predictions","write_predictions","write_suggestions","write_suggestions","write_suggestions"],"q":[[0,"divvunspell"],[169,"gumdrop"],[170,"core::option"],[171,"core::fmt"],[172,"std::path"],[173,"divvunspell::archive"],[174,"alloc::boxed"],[175,"divvunspell::archive::error"],[176,"core::result"],[177,"anyhow"],[178,"core::convert"],[179,"divvunspell::speller"],[180,"alloc::sync"],[181,"alloc::string"],[182,"alloc::vec"],[183,"serde::ser"],[184,"core::any"],[185,"divvunspell::speller::suggestion"]],"i":[0,0,0,0,6,0,0,6,0,0,6,0,7,7,9,13,32,14,3,6,7,8,9,13,32,14,3,6,7,8,9,3,6,7,8,9,3,3,6,7,8,9,3,6,7,8,9,3,6,7,8,9,7,7,9,11,13,14,3,6,7,8,9,13,32,14,3,6,7,8,9,3,7,8,9,3,6,7,8,9,7,8,9,13,32,14,3,6,7,8,9,32,8,0,0,7,14,3,6,7,8,9,3,6,7,8,9,0,14,9,0,3,6,7,8,9,3,6,7,8,9,32,14,0,14,32,0,13,32,14,3,6,7,8,9,13,32,14,3,6,7,8,9,13,32,14,3,6,7,8,9,3,6,7,8,9,7,9,7,32,11,13,14,11,13,14,11,13,14],"f":"```````````````{{{b{c}}}{{b{e}}}{}{}}0000000{{{b{dc}}}{{b{de}}}{}{}}0000000{{{b{f}}}{{j{{b{h}}}}}}{{{b{l}}}{{j{{b{h}}}}}}{{{b{n}}}{{j{{b{h}}}}}}{{{b{A`}}}{{j{{b{h}}}}}}{{{b{Ab}}}{{j{{b{h}}}}}}`{{}{{j{{b{Ad}}}}}}0000{{{b{f}}}{{j{{b{Ad}}}}}}{{{b{l}}}{{j{{b{Ad}}}}}}{{{b{n}}}{{j{{b{Ad}}}}}}{{{b{A`}}}{{j{{b{Ad}}}}}}{{{b{Ab}}}{{j{{b{Ad}}}}}}{{{b{Ad}}}{{j{{b{Ad}}}}}}0000```{{{b{dAf}}}Ah}{{{b{dAj}}}Ah}{{{b{dAl}}}Ah}{{{b{f}}{b{dAn}}}B`}{{{b{l}}{b{dAn}}}B`}{{{b{n}}{b{dAn}}}B`}{{{b{A`}}{b{dAn}}}B`}{{{b{Ab}}{b{dAn}}}B`}{cc{}}0000000````{{{b{f}}}Bb}{{{b{l}}}Bb}{{{b{n}}}Bb}{{{b{A`}}}Bb}{{{b{Ab}}}Bb}```{ce{}{}}0000000``{{{b{Bd}}}{{Bl{{Bh{Bf}}Bj}}}}{{}{{Bn{Ah}}}}`{{}Al}{{{b{d{C`{c}}}}}{{Bl{fCb}}}{{Cd{Ad}}}}{{{b{d{C`{c}}}}}{{Bl{lCb}}}{{Cd{Ad}}}}{{{b{d{C`{c}}}}}{{Bl{nCb}}}{{Cd{Ad}}}}{{{b{d{C`{c}}}}}{{Bl{A`Cb}}}{{Cd{Ad}}}}{{{b{d{C`{c}}}}}{{Bl{AbCb}}}{{Cd{Ad}}}}{{{b{Ad}}{b{d{C`{c}}}}}{{Bl{fCb}}}{{Cd{Ad}}}}{{{b{Ad}}{b{d{C`{c}}}}}{{Bl{lCb}}}{{Cd{Ad}}}}{{{b{Ad}}{b{d{C`{c}}}}}{{Bl{nCb}}}{{Cd{Ad}}}}{{{b{Ad}}{b{d{C`{c}}}}}{{Bl{A`Cb}}}{{Cd{Ad}}}}{{{b{Ad}}{b{d{C`{c}}}}}{{Bl{AbCb}}}{{Cd{Ad}}}}{Ab{{Bn{Ah}}}}``{{{Ch{Cf}}{Cl{Cj}}{b{dAf}}BbBb{b{Cn}}}Ah}{{{b{f}}}{{j{{b{Ad}}}}}}{{{b{l}}}{{j{{b{Ad}}}}}}{{{b{n}}}{{j{{b{Ad}}}}}}{{{b{A`}}}{{j{{b{Ad}}}}}}{{{b{Ab}}}{{j{{b{Ad}}}}}}{{{b{f}}}{{b{Ad}}}}{{{b{l}}}{{b{Ad}}}}{{{b{n}}}{{b{Ad}}}}{{{b{A`}}}{{b{Ad}}}}{{{b{Ab}}}{{b{Ad}}}}{{{b{D`}}c}BlDb}{{{b{Al}}c}BlDb}{n{{Bn{Ah}}}}``{A`{{Bn{Ah}}}}{c{{Bl{e}}}{}{}}000000000000000{{{b{c}}}Dd{}}0000000{{}{{b{Ad}}}}0000````{{{b{dAf}}{b{Ad}}Bb}Ah}{{{b{dAj}}{b{Ad}}Bb}Ah}{{{b{dAl}}{b{Ad}}Bb}Ah}{{{b{dAf}}{b{{Df{Cj}}}}}Ah}{{{b{dAj}}{b{{Df{Cj}}}}}Ah}{{{b{dAl}}{b{{Df{Cj}}}}}Ah}{{{b{dAf}}{b{Ad}}{b{{Df{Dh}}}}}Ah}{{{b{dAj}}{b{Ad}}{b{{Df{Dh}}}}}Ah}{{{b{dAl}}{b{Ad}}{b{{Df{Dh}}}}}Ah}","D":"B`","p":[[1,"reference"],[0,"mut"],[5,"Args",0],[10,"Options",169],[6,"Option",170],[6,"Command",0],[5,"SuggestArgs",0],[5,"TokenizeArgs",0],[5,"PredictArgs",0],[1,"str"],[10,"OutputWriter",0],[1,"unit"],[5,"StdoutWriter",0],[5,"JsonWriter",0],[5,"Formatter",171],[8,"Result",171],[1,"bool"],[5,"Path",172],[10,"SpellerArchive",173],[5,"Box",174],[6,"SpellerArchiveError",175],[6,"Result",176],[8,"Result",177],[5,"Parser",169],[5,"Error",169],[10,"AsRef",178],[10,"Speller",179],[5,"Arc",180],[5,"String",181],[5,"Vec",182],[5,"SpellerConfig",179],[5,"SuggestionRequest",0],[10,"Serializer",183],[5,"TypeId",184],[1,"slice"],[5,"Suggestion",185]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAJkAAwAAAD8ASAALAFwATQA="}],\
["thfst_tools",{"t":"SPPGPPNNHNHHHNNNHHNHNNNOOOOOO","n":["ALIGNMENT","BhfstInfo","HfstToThfst","Opts","ThfstsToBhfst","ZhfstToBhfst","borrow","borrow_mut","boxpath","clap","convert_hfst_to_thfst","convert_thfsts_to_bhfst","convert_zhfst_to_bhfst","fmt","from","from_clap","insert","insert_thfst_files","into","main","try_from","try_into","type_id","acceptor","errmodel","from","from","output","path"],"q":[[0,"thfst_tools"],[23,"thfst_tools::Opts"],[29,"std::path"],[30,"box_format::path"],[31,"clap::app"],[32,"std::io::error"],[33,"core::result"],[34,"core::fmt"],[35,"clap::args::arg_matches"],[36,"box_format::file::writer"],[37,"box_format::compression"],[38,"core::any"]],"i":[0,10,10,0,10,10,10,10,0,10,0,0,0,10,10,10,0,0,10,0,10,10,10,17,17,18,19,17,20],"f":"``````{{{b{c}}}{{b{e}}}{}{}}{{{b{dc}}}{{b{de}}}{}{}}{{{b{f}}{b{h}}}j}{{}l}{{{b{f}}}{{Ab{nA`}}}}{{{b{f}}{b{f}}{b{f}}}{{Ab{nA`}}}}1{{{b{Ad}}{b{dAf}}}Ah}{cc{}}{{{b{Aj}}}Ad}{{{b{dAl}}An{b{f}}{b{h}}}{{Ab{nA`}}}}{{{b{dAl}}{b{f}}}{{Ab{nA`}}}}{ce{}{}}{{}{{Ab{nA`}}}}{c{{Ab{e}}}{}{}}0{{{b{c}}}B`{}}``````","D":"d","p":[[1,"reference"],[0,"mut"],[5,"Path",29],[1,"str"],[5,"BoxPath",30],[5,"App",31],[1,"unit"],[5,"Error",32],[6,"Result",33],[6,"Opts",0],[5,"Formatter",34],[8,"Result",34],[5,"ArgMatches",35],[5,"BoxFileWriter",36],[6,"Compression",37],[5,"TypeId",38],[15,"ThfstsToBhfst",23],[15,"HfstToThfst",23],[15,"ZhfstToBhfst",23],[15,"BhfstInfo",23]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABsAAwAAAA4AEAACABQACQA="}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
