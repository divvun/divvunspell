searchState.loadedDescShard("divvunspell", 0, "Spell-checking and correction with Finite-State Automata.\nHandling of archives of spell-checking models.\nHandling of system paths containing spell-checkers on …\nAutocorrect type spell-checking that predicts next word.\nSpeller model for spell-checking and corrections.\nTokenizer splits strings into words and punctuations.\nTransducer is a Finite-State Automaton with two tapes / …\nSome stuff for filesystems and different OSes.\nPredictor archive is a file read intoo a predictor with …\nSpeller archive is a file read into spell-checker with …\nBox-based archive stuff.\nArchive-related errors.\nArchive metadata handling\nretrieve metadata.\nretrieve metadata.\nReads a speller archive.\nRead and parse a speller archive.\nRead and parse a predictor archive.\nRetrieve predictor.\nretrieve spell-checker.\nZip archive stuff.\nSpeller in box archive.\nAn archive with mmaped language and error model THFST …\nAn archive with mmaped language and error model THFST …\nAn archive with mmaped chunked language and error model …\nAn archive with mmaped chunked language and error model …\nReturns the argument unchanged.\nget the spell-checking component\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\na speller consisting of two HFST automata\nconfigurable extra penalties for edit distance\ncan determine if string is a correct word or suggest …\nfinetuning configuration of the spelling correction …\nweight distance between best suggestion and worst\ncreate a default configuration with following values:\ncreate a default configuration with following values:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncheck if the word is correctly spelled\ncheck if word is correctly spelled with config recasing …\nget the language model automaton\nupper limit for weight of any suggestion\nget the error model automaton\nupper limit for suggestions given\ncreate new speller from two automata\nsome parallel stuff?\nwhether we try to recase mispelt word before other …\nextra penalties for different edit distance type errors\nsuggest corrections to word\nsuggest corrections with recasing and reweighting from …\nSuggestion for a spelling correction.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnicode Words of a string.\nExternal iterator for word boundaries and byte offsets.\nExternal iterator for a string’s word boundaries.\nAn iterator over the substrings of a string which, after …\nView the underlying data (the part yet to be iterated) as …\nView the underlying data (the part yet to be iterated) as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new iterator for <em>words</em>.\nCreate new iterator for <em>word boundries</em>.\nCreate new iterator for <em>word boundaries and their indices</em>.\nCreate new iterator for <em>words</em> and treat the symbols in the …\nCreate new iterator for <em>word boundries</em> with an alphabet.\nCreate new iterator for <em>word boundaries and their indices</em>.\nError with FSA alphabets.\nfile extension.\nIndex table contains something.\nError with input/output.\nError with mmapping\nA file-based finite-state transducer.\nError with transducer reading or processing.\nTransition table contains the arcs of the automaton (and …\nget transducer’s alphabet.\nget end state weight of a state.\nReturns the argument unchanged.\nread a transducer from a file.\nread transition table from a file.\ncheck if there are free transitions at index.\ncheck if there are transitions at given index.\nFinite-state automaton in HFST format.\nget input symbol of a transition.\nCalls <code>U::from(self)</code>.\nWrap into i/o error.\ncheck if given index is an end state.\ncheck if the state is a final state.\nget transducer’s alphabet as mutable reference.\nget next transition with a symbol.\nget output symbol of a transition.\n???\nfollow epsilon transitions.\nfollow free transitions.\nfollow transitions with given symbol.\nget the target state in the index.\nFinite-state automaton in optimised mmapped format.\nget input symbol number of given transition arc.\nget the weight of the transition.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTromsø-Helsinki Finite State Transducer format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFile system.\nBox file.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")